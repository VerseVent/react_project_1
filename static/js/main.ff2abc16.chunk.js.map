{"version":3,"sources":["components/Login.js","service/fetchActivities.js","components/ActivityItem.js","components/ActivityList.js","components/MainBoard.js","index.js"],"names":["Login","to","fetch","activity","json","ActivityItem","typeListItem","itemsTitle","items","useState","isVisible","setIsVisible","onClick","length","className","map","e","i","ActivityList","typeLists","console","log","Object","entries","MainBoard","currentActivity","setCurrentActivity","isClicked","setIsClicked","isLoading","setIsLoading","positiveItems","setPositiveItems","negativeItems","setNegativeItems","useEffect","fetchActivities","then","res","finally","handleSetItem","setItem","type","prevState","handleActivitySelect","guessAnswer","color","height","width","disabled","App","path","element","ReactDOM","createRoot","document","getElementById","render"],"mappings":"oLAGO,SAASA,IACd,OACE,gCACE,uCACA,cAAC,IAAD,CAAMC,GAAG,cAAT,SACE,gD,uGCRO,8GACUC,MAAM,yCADhB,cACPC,EADO,yBAENA,EAASC,QAFH,4C,sBCER,SAASC,EAAT,GAAyC,IAAjBC,EAAgB,EAAhBA,aAEvBC,EAAaD,EAAa,GAC1BE,EAAQF,EAAa,GAC3B,EAAkCG,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAqBA,OAAO,8BAlBH,gCACE,qBACEC,QAAS,WACPD,GAAcD,IAFlB,UAKGH,EACA,IAAMC,EAAMK,OAAS,OAExB,oBAAIC,UAAWJ,EAAY,YAAc,4BAAzC,SACGF,EAAMO,KAAI,SAACC,EAAGC,GACb,OAAO,6BAAaD,GAAJC,a,qBCjBrB,SAASC,EAAT,GAAsC,IAAdC,EAAa,EAAbA,UAI7B,OAHAC,QAAQC,IAAIF,GACZC,QAAQC,IAAIC,OAAOC,QAAQJ,IAGzB,mCACGG,OAAOC,QAAQJ,GAAWJ,KAAI,SAACT,GAC9B,OAAO,cAACD,EAAD,CAAcC,aAAcA,SCHpC,SAASkB,IACd,MAA8Cf,qBAA9C,mBAAOgB,EAAP,KAAwBC,EAAxB,KAEA,EAAkCjB,oBAAS,GAA3C,mBAAOkB,EAAP,KAAkBC,EAAlB,KAEA,EAAkCnB,oBAAS,GAA3C,mBAAOoB,EAAP,KAAkBC,EAAlB,KAEA,EAA0CrB,mBAAS,IAAnD,mBAAOsB,EAAP,KAAsBC,EAAtB,KACA,EAA0CvB,mBAAS,IAAnD,mBAAOwB,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,YHjBG,WAAf,gCGkBIC,GACGC,MAAK,SAACC,GACLZ,EAAmBY,MAEpBC,SAAQ,WACPT,GAAa,QAEhB,CAACH,IAGJ,SAASa,EAAcF,EAAKG,EAASjC,GACnC,IAAQL,EAAmBmC,EAAnBnC,SAAUuC,EAASJ,EAATI,KACblC,EAAMkC,GAGTD,GAAQ,SAACE,GAAD,mBAAC,eACJA,GADG,kBAELD,EAFK,sBAEMC,EAAUD,IAFhB,CAEuBvC,SAJ/BsC,GAAQ,SAACE,GAAD,mBAAC,eAAoBA,GAArB,kBAAiCD,EAAO,CAACvC,QASrD,SAASyC,EAAqBC,GACxBA,GACFL,EAAcf,EAAiBO,EAAkBD,GAEjDH,GAAcD,KAEda,EAAcf,EAAiBS,EAAkBD,GAEjDL,GAAcD,IAGlB,OACE,sBAAKb,UAAU,8BAAf,UACE,4DACA,qBAAKA,UAAU,mBAAf,SACGe,EACC,cAAC,IAAD,CACEf,UAAU,kBACV4B,KAAK,OACLI,MAAO,QACPC,OAAQ,GACRC,MAAO,KAGT,4BAAIvB,EAAgBtB,aAIxB,sBAAKW,UAAU,WAAf,UACE,wBACEmC,SAAUpB,EACVf,UAAU,WACVF,QAAS,kBAAMgC,EA9CH,OA2Cd,oBAOA,wBACEK,SAAUpB,EACVf,UAAU,8BACVF,QAAS,kBAAMgC,GAAqB,IAHtC,uBASF,sBAAK9B,UAAU,kBAAf,UACE,qBAAIA,UAAU,gBAAd,UACE,qDACA,cAACI,EAAD,CAAcC,UAAWY,OAE3B,qBAAIjB,UAAU,gBAAd,UACE,qDACA,cAACI,EAAD,CAAcC,UAAWc,a,MCrFnC,SAASiB,IACP,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,mBAAmBC,QAAS,cAACpD,EAAD,MACxC,cAAC,IAAD,CAAOmD,KAAK,cAAcC,QAAS,cAAC5B,EAAD,SAK5B6B,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAD,UACE,cAACP,EAAD,S","file":"static/js/main.ff2abc16.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport function Login() {\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <Link to=\"/activities\">\r\n        <button>Login</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","export default async function fetchActivities() {\r\n  const activity = await fetch(\"https://www.boredapi.com/api/activity\");\r\n  return activity.json();\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport function ActivityItem({ typeListItem }) {\r\n  // console.log(typeListItem);\r\n  const itemsTitle = typeListItem[0];\r\n  const items = typeListItem[1];\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  function renderList() {\r\n    return (\r\n      <div>\r\n        <h3\r\n          onClick={() => {\r\n            setIsVisible(!isVisible);\r\n          }}\r\n        >\r\n          {itemsTitle}\r\n          {\"(\" + items.length + \")\"}\r\n        </h3>\r\n        <ul className={isVisible ? \"type-list\" : \"type-list visually-hidden\"}>\r\n          {items.map((e, i) => {\r\n            return <li key={i}>{e}</li>;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>{renderList()}</div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { ActivityItem } from \"./ActivityItem\";\r\n\r\nexport function ActivityList({ typeLists }) {\r\n  console.log(typeLists);\r\n  console.log(Object.entries(typeLists));\r\n\r\n  return (\r\n    <>\r\n      {Object.entries(typeLists).map((typeListItem) => {\r\n        return <ActivityItem typeListItem={typeListItem} />;\r\n      })}\r\n    </>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport fetchActivities from \"../service/fetchActivities\";\r\nimport { ActivityItem } from \"./ActivityItem\";\r\nimport ReactLoading from \"react-loading\";\r\nimport { ActivityList } from \"./ActivityList\";\r\n\r\nexport function MainBoard() {\r\n  const [currentActivity, setCurrentActivity] = useState();\r\n\r\n  const [isClicked, setIsClicked] = useState(false);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const [positiveItems, setPositiveItems] = useState({});\r\n  const [negativeItems, setNegativeItems] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetchActivities()\r\n      .then((res) => {\r\n        setCurrentActivity(res);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [isClicked]);\r\n  const guessAnswer = true;\r\n\r\n  function handleSetItem(res, setItem, items) {\r\n    const { activity, type } = res;\r\n    if (!items[type]) {\r\n      setItem((prevState) => ({ ...prevState, [type]: [activity] }));\r\n    } else {\r\n      setItem((prevState) => ({\r\n        ...prevState,\r\n        [type]: [...prevState[type], activity],\r\n      }));\r\n    }\r\n  }\r\n\r\n  function handleActivitySelect(guessAnswer) {\r\n    if (guessAnswer) {\r\n      handleSetItem(currentActivity, setPositiveItems, positiveItems);\r\n\r\n      setIsClicked(!isClicked);\r\n    } else {\r\n      handleSetItem(currentActivity, setNegativeItems, negativeItems);\r\n\r\n      setIsClicked(!isClicked);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"content-container container\">\r\n      <h1>Choose what to do with it?</h1>\r\n      <div className=\"current-activity\">\r\n        {isLoading ? (\r\n          <ReactLoading\r\n            className=\"disable-margins\"\r\n            type=\"spin\"\r\n            color={\"black\"}\r\n            height={40}\r\n            width={40}\r\n          />\r\n        ) : (\r\n          <p>{currentActivity.activity}</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"controls\">\r\n        <button\r\n          disabled={isLoading}\r\n          className=\"button-3\"\r\n          onClick={() => handleActivitySelect(guessAnswer)}\r\n        >\r\n          Select\r\n        </button>\r\n        <button\r\n          disabled={isLoading}\r\n          className=\"button-3 button-3--negative\"\r\n          onClick={() => handleActivitySelect(!guessAnswer)}\r\n        >\r\n          Reject\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"lists-container\">\r\n        <ul className=\"activity-list\">\r\n          <h2>Selected activities</h2>\r\n          <ActivityList typeLists={positiveItems} />\r\n        </ul>\r\n        <ul className=\"activity-list\">\r\n          <h2>Rejected activities</h2>\r\n          <ActivityList typeLists={negativeItems} />\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\r\nimport { Login } from \"./components/Login\";\r\nimport { MainBoard } from \"./components/MainBoard\";\r\nimport \"./index.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/react_project_1\" element={<Login />} />\r\n      <Route path=\"/activities\" element={<MainBoard />} />\r\n    </Routes>\r\n  );\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n);\r\n"],"sourceRoot":""}